
#config file version v2.2.4
#release date: 30.11.2024

#Contributors: Lorincz Robert, Tomblarom

[mcu SO3]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_SO3-if00

#SO3 Tool-board pinout definition
# PA0 - Hotend heater control
# PA1 - Hotend power sensing input
# PA2 - Hotend temperature sensor input
# PA3 - Extruder fan Tacho input
# PA4 - LIS2DW12 nCS - SPI1
# PA5 - LIS2DW12 CLK
# PA6 - LIS2DW12 SDO
# PA7 - LIS2DW12 SDI
# PA8 - Extruder PWM fan speed control
# PA9 - Hotend lit LED control signal
# PA10 - Filament unload button
# PA11 - USB Data -
# PA12 - USB Data +
# PA13 - Filament sensor
# PA14 - Part fan PWM
# PA15 - Z sensor probe input

# PB0 - X end stop
# PB1 - extruder temperature
# PB3 - Z sensor servo output
# PB4 - TMC2209 nEN
# PB5 - TMC2209 UART
# PB6 - TMC2209 DIR
# PB7 - TMC2209 STEP
# PB8 - RGB LED

#################################################################################################################
################################ CHANGE HERE MACRO CONFIGURABLES ################################################
#################################################################################################################

[gcode_macro _SENSOR_VARIABLES]         # change here macro configurables, enable disable functions!*************************
variable_filament_load_temp     :230    # temperature to heat up hotend for filament loading, default is 235
variable_filament_unload_temp   :185    # temperature to heat up hotend for filament un-loading, default is 185
variable_filament_load_min_temp :190    # minimum hotend set temperature allowed in filament load macro, default is 190
variable_nozzle_purge_length    :100    # filament extrude amount during load sequenc, hotend purge from old filament, default is 100
variable_nozzle_purge_speed     :300    # filament extrude speed in mm/min adjust this value lower if flow is too high and extruder skips during loading, default is 300
variable_temp_restore           :True   # [True] restore previous temperature after filament change
variable_disable_autoload       :False  # disable filament autoload feature by setting this variable True
variable_disable_runout         :False  # disable runout by setting this variable True
variable_disable_autounload     :False  # disable auto unload filament by setting this variable to True
variable_pause_on_unload_button :True   # pauses the printer if the unload button is pressed during printing
variable_disable_runout_unload  :True   # disable auto filament unload after runout detection
variable_enable_beep            :True   # uses M300 sound feature, set it True to enable
variable_park_position_x        :100    # edit your X parking position here for pause macro trigerred by runout
variable_park_position_y        :-5     # edit your Y parking position here for pause macro trigerred by runout
variable_park_lift_z            :10     # edit your Z lift amount for parking position here, default is 10
variable_park_retraction        :1      # edit your retraction amount for parking, default is 1
gcode:

[force_move]
enable_force_move: True

[respond]
default_type: echo

###########################################################################################
###################### Onboard accelerometer and resonance tester config ##################
###########################################################################################

[lis2dw]
cs_pin: SO3:PA4
spi_bus: spi1
axes_map: y, z, x

[resonance_tester]
accel_chip: lis2dw
probe_points: 140,120,30  # edit XYZ head position for testing
min_freq: 10
max_freq: 200

##################################################################
########################## EXTRUDER ##############################
##################################################################
[extruder]
step_pin: SO3:PB7
dir_pin: SO3:PB6
enable_pin: !SO3:PB4
microsteps: 32
full_steps_per_rotation: 200
#rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>
rotation_distance: 4.69
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_only_distance: 2500
max_extrude_only_velocity: 120
max_extrude_only_accel: 3000
#_______________________ HEATER NOZZLE ____________________________
heater_pin: SO3:PA0
sensor_pin: SO3:PA2
#_________________________NOZZLE TEMP _____________________________
sensor_type: ATC Semitec 104NT-4-R025H42G  
pullup_resistor: 4700
min_temp: 0
max_temp: 300
pressure_advance: 0.015
pressure_advance_smooth_time: 0.03
min_extrude_temp: 170
smooth_time: 0.5
max_extrude_cross_section:10
max_power: 0.995
pwm_cycle_time: 0.01
control = pid
pid_Kp=24.859 
pid_Ki=2.072 
pid_Kd=74.578

[tmc2209 extruder] 
uart_pin: SO3:PB5
interpolate: true
run_current: 0.8
sense_resistor: 0.11
stealthchop_threshold: 0

[heater_fan extruder_Fan]
pin: !SO3:PA8
tachometer_pin: SO3:PA3
tachometer_ppr: 2
tachometer_poll_interval: 0.0005
heater: extruder
cycle_time: 0.0001 #10KHz PWM frecvency, do not change this!
heater_temp: 85
fan_speed: 0.65 # increase in case experiencing clogging during printing.
hardware_pwm: false
shutdown_speed: 0.0
max_power: 1.0

[firmware_retraction]
retract_length: 1.0
retract_speed: 100
unretract_extra_length: 0.0
unretract_speed: 80

[fan]
pin: SO3:PA14
max_power: 0.995
shutdown_speed: 0.0
cycle_time: 0.01
kick_start_time: 0.2
hardware_pwm: False

#################################################################################################################################
########################################### SO3 Features Configuration ##########################################################
#################################################################################################################################

[output_pin hot_lit]
pin: SO3:PA9
pwm: False
value: 1

[neopixel SO3RGB]
pin: SO3:PB8
chain_count: 1
color_order: GRB
initial_RED: 0.0
initial_GREEN: 1.0
initial_BLUE: 0.0

[thermistor SO3Thermistor]
temperature1: 25
resistance1: 100000
beta: 3950

[temperature_sensor SO3]
sensor_type: SO3Thermistor
sensor_pin: SO3:PB1
pullup_resistor: 4700
min_temp: 0
max_temp: 85

## STM32 MCU temp
[temperature_sensor SO3_MCU]
sensor_type: temperature_mcu
sensor_mcu: SO3

#################################################################################################################################
############################################## Runout and autoload macros #######################################################
#################################################################################################################################

#################################################################################################################################
####################################### DO NOT CHANGE ANYTHING BELOW THIS LINE!!! ###############################################
#################################################################################################################################
####################################### UNLESS YOU KNOW WHAT YOU ARE DOING OR YOU ARE BORED AND NEED TO DO SOMETHING OR YOU ARE ALONE AND NEED SOMETHING TO MESS UP YOUR LIFE OR YOU CAN DO IT BETTER THAN ME OR YOU ARE A REAL SMARTASS OR JUST BECAUSE YOU CAN OR YOU RUN OUT OF BEAR OR HAS NOTHING BETTER TO DO OR ANY UNREASONABLE REASON
#################################################################################################################################


#*****************************initial RGN LED set at printer start****************************************************************
[delayed_gcode startup_RGB_SET]
initial_duration: 2
gcode:    
  {% if printer["filament_switch_sensor SO3Senzor"].filament_detected==true %}
      SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
  {% else %}
      SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
  {% endif %}   


#***********************************filament swicth definition***********************************************************
[filament_switch_sensor SO3Senzor]
switch_pin: SO3:PA13
pause_on_runout: False # do not change to true, printer is paused in the next sections
runout_gcode: UPDATE_DELAYED_GCODE ID=runout_filter DURATION=0.5 # duration defines the filter time for runout detection
insert_gcode: filament_load_init
event_delay: 1.0
pause_delay: 0.1


#////////////////////////////////////////Filament Unload macros/////////////////////////////////////////////////

[gcode_button filament_unload]
pin: !SO3:PA10
release_gcode:  # filament unload procedure   
  SET_LED LED=SO3RGB RED=0.0 GREEN=0.5 BLUE=0.5
  filament_unload_init
press_gcode: # do not add any macro call here

[delayed_gcode runout_filter]
gcode: #checking if filament runout is still present after defined delay time, default 0.5s
  {% if printer["filament_switch_sensor SO3Sensor"].filament_detected==false %}
      runout_init
  {% else %}
      M118 SO3 -  Runout sensor intermitent contact detected!
  {% endif %}


[gcode_macro runout_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
  {% if (printer.print_stats.state == "printing") %}
    {% if(sensor.disable_runout|lower == 'false') %}
      filament_change_state1
    {% else %}
    M118 SO3 -  Filament runout is disabled in the sensor config file!
    {% endif %}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
  UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=0

[gcode_macro filament_change_state1]
variable_changebusy: 0
variable_temp_target: 0
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if changebusy == 0 %}
    PAUSE # call printer pause macro    
    M118 SO3 -  Printer paused due to filament runout!
    {% if(sensor.disable_runout_unload|lower == 'false') %}
        SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=1
	filament_change_state2 # when enabled automatically unloads filament after runout detection. It is not recomanded to enable for large prints, filamen may jam innside the extuder	
    {% endif %}
  {% else %}
  {% endif %}

[gcode_macro filament_change_state2]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
  {% if (sensor.enable_beep|lower == 'true') %}
    M300 # beep sound
  {% endif %}
  M118 SO3 -  Unloading filament...
  M83
  G92 E0
  {% if (printer.extruder.can_extrude|lower != 'true')%} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
      M118 SO3 -  Hotend heating!
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} #wait for reaching filament unload temp
      {% endif %}
  {% if(printer.extruder.target == 0) %} # checking for set temperature if is zero than set to 200 / hotend hot but cooling due to set target temp 0
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} #wait for reaching filament unload temp
  {% endif %}
 # filament_unload_procedure  # call macro of filamnet unload procedure
  M400
  M118 SO3 -  Load new filament! Wait until is loaded, then resume printing.
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 # switch off heater
  UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2.5 # timing must be set to clear delay plus 0.5s. is due to wait to remove filament before starting load even in case there is a blob at the tip of the extracted filament which woudl trigger the sensor twice

#############################################END filament auto load macro section END***********************************************************
																																				

[gcode_macro filament_load_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
  {% if (printer.print_stats.state != "printing") %}
    {% if(sensor.disable_autoload|lower == 'false') %}
      filament_load
    {% else %}
    M118 SO3 -  Filament auto-load is disabled in the sensor config file!
    UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=3
    {% endif %}
  {% else %}
     M118 SO3 -  Printing! Can't load filament right now!
  {% endif %}
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=filamentpresent VALUE=1
  UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=2


[gcode_macro filament_load]
variable_loadbusy: 0
variable_USER_TEMP: 0
variable_LOAD_TEMP: 0
gcode:
    SET_LED LED=SO3RGB RED=0.7 GREEN=0.5 BLUE=0.0
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% if loadbusy == 0 %} # requires [virtual_sdcard]
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1
      {% set USER_TEMP = printer.extruder.target %} # save user set temperature before loading
      {% set LOAD_TEMP = 0 %}
        {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target < sensor.filament_load_min_temp) %} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_load_temp} # set user defined load temperature
          {% set LOAD_TEMP = sensor.filament_load_temp %} # save user set temperature before loading
         M118 SO3 -  Hotend heating!
      {% endif %}     
    {% if (sensor.enable_beep|lower == 'true') %} 
      M300 # beep sound
    {% endif %}
    M118 SO3 -  Filament loading!
    M82           #set extruder to absolute mode
    G92 E0
    G4 P1500        # wait for 1.5 seconds
    FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=10 ACCEL=1000  # load filament inside the gears force move needs to be enabled
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={LOAD_TEMP} # wait for reaching set temperature
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={USER_TEMP} # wait for reaching set temperature
    G1 E{sensor.nozzle_purge_length} F{sensor.nozzle_purge_speed} # extrude preconfigured purge length
    M400 # wait to complete nozzle purge
    {% if ((printer.print_stats.state == "printing")  or (printer.print_stats.state == "paused"))%} #if the printer is not printing or paused the nozzle temp will not be restored but set to 0.
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET={USER_TEMP} # restore user temp if it was set before loading      
    {% else %}
      M104 S0 T0
    {% endif %}
    {% if printer["filament_switch_sensor SO3Sensor"].filament_detected==true %}
      M118 SO3 -  Filament load complete!
      SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
      {% if (sensor.enable_beep|lower == 'true') %}
        M300 # beep sound
      {% endif %}
    {% else %}
      M118 SO3 -  Filament load failed!  
      SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
    {% endif %}      
    UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2
    UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
    {% else %}
      M118 SO3 -  Filament already loaded!
	  SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
    {% endif %}  
#############################################END filament suto load macro section END***********************************************************

#############################################filament auto unload macro section*****************************************************************
[gcode_macro filament_unload_procedure]
gcode:
    G92 E0
    G0 E-9 F3600 # retract fast 9mm
    G4 P2000 # Wait 2 sec for filament cooling
    G0 E9 F3000 # extruder 9mm to crush filament end
    G0 E-5 F3000 #extract filament to cold end fast
    G0 E-10 F300 #extract filament to cold end slow
    G4 P5000 # Wait 5 sec for filament cooling
    G0 E-25 F3000 	#extract filament completely


[gcode_macro filament_unload_init]
gcode:
  {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
  {% if (printer.print_stats.state != "printing") %}
    {% if(sensor.disable_autounload|lower == 'false') %}
      filament_unload
    {% else %}
      M118 SO3 -  Filament auto-unload is disabled in the sensor config file!
    {% endif %}
  {% else %}
     {% if(sensor.pause_on_unload_button|lower == 'true') %}
      PAUSE
      M118 SO3 -  Printer paused by SO3 unload button!
      SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
    {% else %}
      M118 SO3 -  Printing! Can't unload filament right now!
    {% endif %}
  {% endif %}

[gcode_macro filament_unload]
variable_unloadbusy: 0
variable_filamentpresent: 0
gcode:
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}
    {% if unloadbusy == 0 %} # requires [virtual_sdcard]
      SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=1
      SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
												   
      {% if (sensor.enable_beep|lower == 'true') %}
        M300 # beep sound
      {% endif %}
      M118 SO3 -  Filament unloading!
      M83
      G92 E0
      {% if ((printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target == 0))%} # checking for minimum extrusion temperature
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
        M118 SO3 -  Hotend heating!
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={sensor.filament_unload_temp} # restore user temp if it was set before loading
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={sensor.filament_unload_temp} # wait for reaching configured unload temperature
      {% endif %}
      filament_unload_procedure # call macro of filamnet unload procedure
      #M104 S0 T0					   
      M400 # wait to complete unload
      M118 SO3 -  Filament unload complete!
      UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2
      UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
      UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=2
      SET_LED LED=SO3RGB RED=0.0 GREEN=0.0 BLUE=1.0
      {% if (sensor.enable_beep|lower == 'true') %}
        M300 # beep sound
      {% endif %}
    {% else %}
      M118 SO3 -  Nothing to unload!
	  SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
    {% endif %}

#############################################END filament auto unload macro section END***********************************************************

[delayed_gcode unload_RGB_update]
gcode: # change RGB led to RED after filament is phisicaly removed after unload
  {% if printer["filament_switch_sensor SO3Sensor"].filament_detected==true %}
      UPDATE_DELAYED_GCODE ID=unload_RGB_update DURATION=2
  {% else %}
      SET_LED LED=SO3RGB RED=1.0 GREEN=0.0 BLUE=0.0
  {% endif %}


[delayed_gcode clear_unloadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_unload VARIABLE=unloadbusy VALUE=0
  #M118 SO3 -  Clear Unload busy!

[delayed_gcode clear_changebusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=0
  #M118 SO3 -  Clear Load busy!

[delayed_gcode set_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=1
  #M118 SO3 -  Set Load busy!

[delayed_gcode clear_loadbusy]
gcode:
  SET_GCODE_VARIABLE MACRO=filament_load VARIABLE=loadbusy VALUE=0
  #M118 SO3 -  Clear Load busy!



#################################################################################################################################
##################### DELETE PAUSE AND RESUME MACROS IF YOU WANT TO USE YOUR OWN ONES!###########################################
#################################################################################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:  
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %}  
    {% set x = params.X|default(sensor.park_position_x) %}   
    {% set y = params.Y|default(sensor.park_position_y) %}   
    {% set z = params.Z|default(sensor.park_lift_z)|float %} 
    {% set e = params.E|default(sensor.park_retraction) %}   
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=bed_restore_temp VALUE={printer.heater_bed.target}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extruder_restore_temp VALUE={printer.extruder.target}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state 
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000
    SET_LED LED=SO3RGB RED=1.0 GREEN=1.0 BLUE=0.0

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_bed_restore_temp:0
variable_extruder_restore_temp:0
gcode:
    ##### set defaults #####
    {% set sensor = printer['gcode_macro _SENSOR_VARIABLES'] %} 
    M118 SO3 -  Restoring heaters temperature, it might take a whyle!
    M118 SO3 -  Restoring bed temperature...
    M140 S{bed_restore_temp}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={(bed_restore_temp-1)}
    M118 SO3 -  Restoring extruder temperature...
    M104 S{extruder_restore_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={(extruder_restore_temp-1)}
    {% set e = params.E|default(sensor.park_retraction) %} 
    G91
    G1 E{e} F2100
    G90    
    M118 SO3 -  Temperatures restored, resume printing!
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    SET_LED LED=SO3RGB RED=0.0 GREEN=1.0 BLUE=0.0
